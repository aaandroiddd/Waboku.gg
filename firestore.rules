service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rate limiting function - only for updates
    function isNotRateLimited() {
      return (resource == null) || 
        (request.time > resource.data.lastAction + duration.value(60, 's')) ||
        (resource.data.lastAction == null);
    }

    // Data validation functions
    function isValidListing(data) {
      return data.title is string
        && data.title.size() >= 3
        && data.title.size() <= 100
        && data.price is number
        && data.price >= 0
        && data.description is string
        && data.description.size() <= 2000
        && data.userId is string
        && data.createdAt is string;
    }

    function isValidMessage(data) {
      return data.text is string 
        && data.text.size() > 0 
        && data.text.size() <= 1000
        && data.senderId is string
        && data.receiverId is string
        && data.createdAt is string;
    }

    function isValidProfile(data) {
      return data.username is string
        && data.email is string;
    }

    // Allow read access to usernames collection for everyone
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() 
        && (resource == null || resource.data.uid == request.auth.uid);
    }

    // User profiles with enhanced validation
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && userId == request.auth.uid;
      allow update: if isOwner(userId) 
        && isValidProfile(request.resource.data)
        && isNotRateLimited();
      allow delete: if isOwner(userId);
    }

    // Listings collection rules with rate limiting and validation
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && isValidListing(request.resource.data)
        && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) 
        && isValidListing(request.resource.data)
        && isNotRateLimited();
      allow delete: if isOwner(resource.data.userId);
    }

    // Messages with rate limiting and content validation
    match /messages/{messageId} {
      allow read: if isAuthenticated() 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated()
        && isValidMessage(request.resource.data)
        && request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() 
        && resource.data.senderId == request.auth.uid
        && isValidMessage(request.resource.data)
        && isNotRateLimited();
      allow delete: if isAuthenticated() 
        && resource.data.senderId == request.auth.uid;
    }

    // Favorites collection rules with rate limiting
    match /favorites/{favoriteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Default rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}