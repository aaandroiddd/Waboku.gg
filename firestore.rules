service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Special function to handle sign-out gracefully
    function allowSignOutOperation() {
      // During sign-out, we want to be more permissive with read operations
      // This helps prevent "Missing or insufficient permissions" errors
      return true;
    }
    
    // Function to check if a user is in the process of signing out
    function isSigningOut(userId) {
      return exists(/databases/$(database)/documents/signOutState/$(userId));
    }

    // Rate limiting function - only for updates
    function isNotRateLimited() {
      return true; // Temporarily disabled rate limiting for profile updates
    }

    // ENHANCED: Data validation functions with security improvements
    function isValidListing(data) {
      return data.title is string
        && data.title.size() >= 3
        && data.title.size() <= 100
        && (data.price is number && data.price >= 0 && data.price <= 50000) // SECURITY: Validate price range
        && (data.description is string || !("description" in data))
        && data.userId is string
        && data.userId == request.auth.uid // SECURITY: Ensure userId matches authenticated user
        && data.imageUrls is list
        && data.imageUrls.size() <= 10 // SECURITY: Limit number of images
        && data.status is string
        && data.status in ['active', 'inactive', 'sold', 'archived'] // SECURITY: Validate status values
        && data.city is string
        && data.state is string
        && data.game is string
        && data.condition is string
        && data.username is string // SECURITY: Validate username field
        && data.createdAt is timestamp // SECURITY: Validate createdAt timestamp
        && data.expiresAt is timestamp // SECURITY: Validate expiresAt timestamp
        && (data.isGraded == true || data.isGraded == false)
        && (!data.isGraded || (
          (!("gradeLevel" in data) || data.gradeLevel == null || data.gradeLevel is number) &&
          (!("gradingCompany" in data) || data.gradingCompany == null || data.gradingCompany is string)
        ))
        && (!("language" in data) || data.language is string) // SECURITY: Validate language field
        && (!("finalSale" in data) || data.finalSale is bool) // SECURITY: Validate finalSale field
        && (!("offersOnly" in data) || data.offersOnly is bool) // SECURITY: Validate offersOnly field
        && (!("accountTier" in data) || data.accountTier is string) // SECURITY: Validate accountTier field
        && (!("coverImageIndex" in data) || data.coverImageIndex is number) // SECURITY: Validate coverImageIndex field
        && (!("cardName" in data) || data.cardName is string) // SECURITY: Validate cardName field
        && (!("quantity" in data) || data.quantity is number) // SECURITY: Validate quantity field
        && (!("latitude" in data) || data.latitude is number) // SECURITY: Validate latitude field
        && (!("longitude" in data) || data.longitude is number) // SECURITY: Validate longitude field
        && (!("updatedAt" in data) || data.updatedAt is timestamp) // SECURITY: Validate updatedAt timestamp
        && (!("archivedAt" in data) || data.archivedAt == null || data.archivedAt is timestamp) // SECURITY: Validate archivedAt field
        && (!("originalCreatedAt" in data) || data.originalCreatedAt == null || data.originalCreatedAt is timestamp) // SECURITY: Validate originalCreatedAt field
        && (!("expirationReason" in data) || data.expirationReason == null || data.expirationReason is string) // SECURITY: Validate expirationReason field
        && (!("soldTo" in data) || data.soldTo == null || data.soldTo is string) // SECURITY: Validate soldTo field
        && (!("previousStatus" in data) || data.previousStatus == null || data.previousStatus is string) // SECURITY: Validate previousStatus field
        && (!("previousExpiresAt" in data) || data.previousExpiresAt == null || data.previousExpiresAt is timestamp) // SECURITY: Validate previousExpiresAt field
        && (!("favoriteCount" in data) || data.favoriteCount is number) // SECURITY: Validate favoriteCount field
        && (!("viewCount" in data) || data.viewCount is number) // SECURITY: Validate viewCount field
        && (!("distance" in data) || data.distance is number) // SECURITY: Validate distance field
        && (!("isMockListing" in data) || data.isMockListing is bool) // SECURITY: Validate isMockListing field
        && (!("needsReview" in data) || data.needsReview is bool) // SECURITY: Validate needsReview field
        && (!("reviewReason" in data) || data.reviewReason is string) // SECURITY: Validate reviewReason field
        && (!("reviewCategory" in data) || data.reviewCategory is string) // SECURITY: Validate reviewCategory field
        && (!("moderationStatus" in data) || data.moderationStatus is string) // SECURITY: Validate moderationStatus field
        && (!("moderatedAt" in data) || data.moderatedAt is timestamp) // SECURITY: Validate moderatedAt field
        && (!("hasBeenReviewed" in data) || data.hasBeenReviewed is bool); // SECURITY: Validate hasBeenReviewed field
    }

    function isValidMessage(data) {
      return data.text is string 
        && data.text.size() > 0 
        && data.text.size() <= 1000
        && data.senderId is string
        && data.senderId == request.auth.uid // SECURITY: Ensure sender matches authenticated user
        && data.receiverId is string
        && data.receiverId != request.auth.uid // SECURITY: Prevent self-messaging
        && data.createdAt is string;
    }

    function isValidProfile(data) {
      return data.uid is string
        && data.uid == request.auth.uid // SECURITY: Ensure UID matches authenticated user
        && data.email is string
        && data.username is string
        && data.username.size() >= 3
        && data.username.size() <= 30;
    }

    // SECURITY: New validation functions for offers and reviews
    function isValidOffer(data) {
      return data.buyerId is string
        && data.buyerId == request.auth.uid // SECURITY: Ensure buyer matches authenticated user
        && data.sellerId is string
        && data.sellerId != request.auth.uid // SECURITY: Prevent self-offers
        && data.listingId is string
        && data.amount is number
        && data.amount > 0
        && data.amount <= 50000 // SECURITY: Reasonable maximum
        && data.status is string
        && data.status in ['pending', 'accepted', 'declined', 'expired', 'countered']; // SECURITY: Validate status
    }

    function isValidReview(data) {
      return data.reviewerId is string
        && data.reviewerId == request.auth.uid // SECURITY: Ensure reviewer matches authenticated user
        && data.sellerId is string
        && data.sellerId != request.auth.uid // SECURITY: Prevent self-reviews
        && data.orderId is string
        && data.rating is number
        && data.rating >= 1
        && data.rating <= 5
        && data.rating == math.floor(data.rating) // SECURITY: Ensure integer rating
        && (!("comment" in data) || (data.comment is string && data.comment.size() <= 1000)); // SECURITY: Validate comment length
    }

    // Allow read access to usernames collection for everyone
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated();
      allow update: if isAuthenticated();
    }

    // User profiles with enhanced validation
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && userId == request.auth.uid;
      allow update: if (isAuthenticated() 
        && userId == request.auth.uid) || isSigningOut(userId);
      allow delete: if isOwner(userId);
    }
    
    // Special collection for handling sign-out state
    // This collection has public read/write access to ensure sign-out works properly
    // even when authentication state is changing
    match /signOutState/{userId} {
      allow read, write, delete: if true;
    }

    // CRITICAL FIX: Listings collection rules - ALLOW PUBLIC READ ACCESS
    match /listings/{listingId} {
      // FIXED: Allow ANYONE to read listings without authentication - this is essential for the marketplace
      // This includes both individual document reads and collection queries
      allow read: if true;
      
      // Allow authenticated users to create listings with validation
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidListing(request.resource.data);
      
      // Allow owners to update their listings with flexible validation
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid
        && (
          // Allow status changes (archive/restore operations) with basic validation
          (request.resource.data.status in ['active', 'inactive', 'sold', 'archived'] &&
           request.resource.data.updatedAt is timestamp) ||
          // For comprehensive updates, require full validation
          isValidListing(request.resource.data)
        );
      
      // Allow owners to delete their listings
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // SECURITY FIX: Messages with proper participant validation
    match /messages/{messageId} {
      // Allow read access only to message participants
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
      
      // Allow users to create messages with validation
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        isValidMessage(request.resource.data);
      
      // Allow users to update only their own messages
      allow update: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      
      // Allow users to delete only their own messages
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }

    // Favorites subcollection rules
    match /users/{userId}/favorites/{favoriteId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Favorite groups subcollection rules
    match /users/{userId}/favoriteGroups/{groupId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Chat collection rules
    match /chats/{chatId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Orders collection rules
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.buyerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
    }
    
    // User-specific orders subcollection rules
    match /users/{userId}/orders/{orderRef} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // SECURITY FIX: Offers collection with enhanced validation
    match /offers/{offerId} {
      // Allow users to read offers where they are either the buyer or seller
      allow read: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      
      // Allow users to create offers with validation
      allow create: if isAuthenticated() && 
        request.resource.data.buyerId == request.auth.uid &&
        isValidOffer(request.resource.data);
      
      // Allow users to update offers with restrictions
      allow update: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid) &&
        // SECURITY: Prevent changing core offer data after creation
        request.resource.data.buyerId == resource.data.buyerId &&
        request.resource.data.sellerId == resource.data.sellerId &&
        request.resource.data.listingId == resource.data.listingId &&
        request.resource.data.amount == resource.data.amount;
      
      // Allow users to delete offers if they are either the buyer or seller
      allow delete: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
    }

    // Wanted posts collection rules - ALLOW PUBLIC READ ACCESS
    match /wantedPosts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // SECURITY FIX: Reviews collection with proper authentication - ALLOW PUBLIC READ ACCESS
    match /reviews/{reviewId} {
      allow read: if true; // Anyone can read reviews
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid &&
        isValidReview(request.resource.data);
      allow update: if isAuthenticated() && 
        (resource.data.reviewerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.reviewerId == request.auth.uid;
    }
    
    // Review stats collection rules - ALLOW PUBLIC READ ACCESS
    match /reviewStats/{sellerId} {
      allow read: if true; // Anyone can read review stats
      allow create, update: if true; // Allow creation from server-side code
      allow delete: if false; // Don't allow deletion of review stats
    }

    // Short ID mappings collection rules - ALLOW PUBLIC READ ACCESS
    match /shortIdMappings/{shortId} {
      allow read: if true; // Anyone can read mappings
      allow create, update: if true; // Allow creation from server-side code
      allow delete: if false; // Don't allow deletion of mappings
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Allow server-side creation of notifications
      allow create: if true;
      // Users can update their own notifications (mark as read, etc.)
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Notification preferences collection rules
    match /notificationPreferences/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // SECURITY: Security events collection for monitoring
    match /securityEvents/{eventId} {
      allow read: if false; // Only server-side access
      allow create: if true; // Allow server-side creation
      allow update: if false; // Immutable once created
      allow delete: if false; // Never delete security events
    }

    // Default rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
