service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Special function to handle sign-out gracefully
    function allowSignOutOperation() {
      // During sign-out, we want to be more permissive with read operations
      // This helps prevent "Missing or insufficient permissions" errors
      return true;
    }
    
    // Function to check if a user is in the process of signing out
    function isSigningOut(userId) {
      return exists(/databases/$(database)/documents/signOutState/$(userId));
    }

    // Rate limiting function - only for updates
    function isNotRateLimited() {
      return true; // Temporarily disabled rate limiting for profile updates
    }

    // Data validation functions
    function isValidListing(data) {
      return data.title is string
        && data.title.size() >= 3
        && data.title.size() <= 100
        && (data.price is number || data.price is string)
        && (data.description is string || !("description" in data))
        && data.userId is string
        && data.imageUrls is list
        && data.status is string
        && data.city is string
        && data.state is string
        && data.game is string
        && data.condition is string
        && (data.isGraded == true || data.isGraded == false)
        && (!data.isGraded || (
          (!("gradeLevel" in data) || data.gradeLevel == null || data.gradeLevel is number) &&
          (!("gradingCompany" in data) || data.gradingCompany == null || data.gradingCompany is string)
        ));
    }

    function isValidMessage(data) {
      return data.text is string 
        && data.text.size() > 0 
        && data.text.size() <= 1000
        && data.senderId is string
        && data.receiverId is string
        && data.createdAt is string;
    }

    function isValidProfile(data) {
      return data.uid is string
        && data.email is string
        && data.username is string
        && data.username.size() >= 3
        && data.username.size() <= 30;
    }

    // Allow read access to usernames collection for everyone
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated();
      allow update: if isAuthenticated();
    }

    // User profiles with enhanced validation
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && userId == request.auth.uid;
      allow update: if (isAuthenticated() 
        && userId == request.auth.uid) || isSigningOut(userId);
      allow delete: if isOwner(userId);
    }
    
    // Special collection for handling sign-out state
    // This collection has public read/write access to ensure sign-out works properly
    // even when authentication state is changing
    match /signOutState/{userId} {
      allow read, write, delete: if true;
    }

    // Listings collection rules with rate limiting and validation
    match /listings/{listingId} {
      // Allow anyone to read listings without authentication
      allow read: if true;
      
      // Allow authenticated users to create listings with validation
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && isValidListing(request.resource.data);
      
      // Allow owners to update their listings with validation
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && isValidListing(request.resource.data);
      
      // Allow owners to delete their listings
      allow delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
    }

    // Messages with rate limiting and content validation
    match /messages/{messageId} {
      // Allow read access to messages for authenticated users
      allow read: if isAuthenticated();
      
      // Allow users to create messages if they are authenticated
      allow create: if isAuthenticated();
      
      // Allow users to update their own messages
      allow update: if isAuthenticated();
      
      // Allow users to delete their own messages
      allow delete: if isAuthenticated();
    }

    // Favorites subcollection rules
    match /users/{userId}/favorites/{favoriteId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Favorite groups subcollection rules
    match /users/{userId}/favoriteGroups/{groupId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Chat collection rules
    match /chats/{chatId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Orders collection rules
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.buyerId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
    }
    
    // User-specific orders subcollection rules
    match /users/{userId}/orders/{orderRef} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Offers collection rules
    match /offers/{offerId} {
      // Allow users to read offers where they are either the buyer or seller
      allow read: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      
      // Allow users to create offers if they are authenticated and buyerId matches the authenticated user
      allow create: if isAuthenticated() && 
        request.resource.data.buyerId == request.auth.uid;
      
      // Allow users to update offers if they are authenticated and they are either the buyer or seller
      allow update: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      
      // Allow users to delete offers if they are authenticated and they are either the buyer or seller
      allow delete: if isAuthenticated() && 
        (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
    }

    // Wanted posts collection rules
    match /wantedPosts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      allow read: if true; // Anyone can read reviews
      allow create: if true; // Allow creation from server-side code
      allow update: if isAuthenticated() && 
        (resource.data.reviewerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow delete: if isAuthenticated() && resource.data.reviewerId == request.auth.uid;
    }
    
    // Review stats collection rules
    match /reviewStats/{sellerId} {
      allow read: if true; // Anyone can read review stats
      allow create, update: if true; // Allow creation from server-side code
      allow delete: if false; // Don't allow deletion of review stats
    }

    // Short ID mappings collection rules
    match /shortIdMappings/{shortId} {
      allow read: if true; // Anyone can read mappings
      allow create, update: if true; // Allow creation from server-side code
      allow delete: if false; // Don't allow deletion of mappings
    }

    // Default rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}