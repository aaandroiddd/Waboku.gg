{
  "rules": {
    "connection_tests": {
      ".read": "auth != null",
      ".write": "auth != null",
      "$test_id": {
        ".read": "auth != null",
        ".write": "auth != null"
      }
    },
    
    "debug": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('account').child('tier').val() === 'admin'",
      ".write": "auth != null && root.child('users').child(auth.uid).child('account').child('tier').val() === 'admin'"
    },
    
    "users": {
      "$uid": {
        ".read": "auth != null && (auth.uid === $uid || root.child('users').child(auth.uid).child('account').child('tier').val() === 'admin')",
        ".write": "auth != null && (auth.uid === $uid || auth.token.admin === true)",
        "email": {
          ".validate": "newData.isString()"
        },
        "displayName": {
          ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 50"
        },
        "account": {
          ".validate": "newData.hasChildren(['tier'])",
          "tier": {
            ".validate": "newData.isString() && (newData.val() === 'free' || newData.val() === 'premium' || newData.val() === 'admin')"
          },
          "status": {
            ".validate": "newData.isString() && newData.val().length <= 100"
          },
          "stripeCustomerId": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "subscriptionId": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "lastUpdated": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "subscription": {
            ".validate": "true",
            "status": {
              ".validate": "newData.isString() && (newData.val() === 'active' || newData.val() === 'canceled' || newData.val() === 'none' || newData.val() === 'trialing' || newData.val() === 'replaced')"
            },
            "stripeSubscriptionId": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "startDate": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "endDate": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "renewalDate": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "canceledAt": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "cancelAtPeriodEnd": {
              ".validate": "!newData.exists() || newData.isBoolean()"
            },
            "tier": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "currentPeriodEnd": {
              ".validate": "!newData.exists() || newData.isNumber()"
            },
            "lastUpdated": {
              ".validate": "!newData.exists() || newData.isNumber()"
            },
            "$other": {
              ".validate": "true"
            }
          },
          "$other": {
            ".validate": false
          }
        },
        "messageThreads": {
          ".read": "auth != null && auth.uid === $uid",
          ".write": "auth != null && auth.uid === $uid",
          "$chatId": {
            ".validate": "newData.hasChildren(['recipientId', 'chatId', 'lastMessageTime'])",
            "recipientId": {
              ".validate": "newData.isString()"
            },
            "chatId": {
              ".validate": "newData.isString()"
            },
            "lastMessageTime": {
              ".validate": "newData.isNumber() && newData.val() <= now"
            },
            "unreadCount": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "subject": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "listingId": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "listingTitle": {
              ".validate": "!newData.exists() || newData.isString()"
            },
            "$other": {
              ".validate": false
            }
          }
        }
      }
    },

    "favorites": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid",
        "$listingId": {
          ".validate": "newData.hasChildren(['createdAt'])",
          "createdAt": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          }
        }
      }
    },

    "searchTerms": {
      ".read": true,
      ".write": "auth != null",
      ".indexOn": ["count", "lastUpdated"],
      "$term": {
        ".validate": "newData.hasChildren(['term', 'count', 'lastUpdated'])",
        "term": {
          ".validate": "newData.isString() && newData.val().length >= 2 && newData.val().length <= 50"
        },
        "count": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "lastUpdated": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        }
      }
    },

    "searches": {
      ".read": true,
      ".write": "auth != null",
      ".indexOn": ["timestamp"],
      "$searchId": {
        ".validate": "newData.hasChildren(['term', 'timestamp'])",
        "term": {
          ".validate": "newData.isString() && newData.val().length >= 2 && newData.val().length <= 50"
        },
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        }
      }
    },

    "listings": {
      ".indexOn": ["createdAt", "userId", "status"],
      "$listingId": {
        ".read": "auth != null",
        ".write": "auth != null && (!data.exists() || data.child('userId').val() === auth.uid)",
        ".validate": "newData.hasChildren(['userId', 'title', 'price', 'status', 'createdAt'])",
        "userId": {
          ".validate": "newData.val() === auth.uid"
        },
        "title": {
          ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 200"
        },
        "price": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "status": {
          ".validate": "newData.isString() && (newData.val() === 'active' || newData.val() === 'sold' || newData.val() === 'deleted')"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && (!data.exists() || data.val() === newData.val()) && newData.val() <= now"
        }
      }
    },

    "messages": {
      ".indexOn": ["timestamp", "chatId"],
      "$chatId": {
        ".read": "auth != null && (root.child('users').child(auth.uid).child('messageThreads').child($chatId).exists() || root.child('chats').child($chatId).child('participants').child(auth.uid).exists())",
        ".write": "auth != null && (root.child('users').child(auth.uid).child('messageThreads').child($chatId).exists() || root.child('chats').child($chatId).child('participants').child(auth.uid).exists())",
        "$messageId": {
          ".validate": "newData.hasChildren(['senderId', 'content', 'timestamp', 'type'])",
          "senderId": {
            ".validate": "newData.val() === auth.uid"
          },
          "receiverId": {
            ".validate": "newData.isString()"
          },
          "content": {
            ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 2000"
          },
          "type": {
            ".validate": "newData.isString() && (newData.val() === 'text' || newData.val() === 'image' || newData.val() === 'system')"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "listingId": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "read": {
            ".validate": "!newData.exists() || newData.isBoolean()"
          },
          "subject": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },

    "chats": {
      ".indexOn": ["createdAt", "participants"],
      "$chatId": {
        ".read": "auth != null && (root.child('users').child(auth.uid).child('messageThreads').child($chatId).exists() || data.child('participants').child(auth.uid).exists())",
        ".write": "auth != null && (root.child('users').child(auth.uid).child('messageThreads').child($chatId).exists() || data.child('participants').child(auth.uid).exists() || !data.exists())",
        ".validate": "newData.hasChildren(['participants', 'createdAt'])",
        "participants": {
          ".validate": "newData.hasChildren()",
          "$uid": {
            ".validate": "newData.isBoolean()"
          }
        },
        "participantNames": {
          "$uid": {
            ".validate": "newData.isString()"
          }
        },
        "deletedBy": {
          "$uid": {
            ".validate": "auth != null && $uid === auth.uid"
          }
        },
        "lastMessage": {
          ".validate": "newData.hasChildren(['senderId', 'receiverId', 'content', 'timestamp', 'type'])",
          "senderId": {
            ".validate": "newData.isString()"
          },
          "receiverId": {
            ".validate": "newData.isString()"
          },
          "content": {
            ".validate": "newData.isString() && newData.val().length <= 2000"
          },
          "type": {
            ".validate": "newData.isString() && (newData.val() === 'text' || newData.val() === 'image' || newData.val() === 'system')"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "id": {
            ".validate": "newData.isString()"
          },
          "subject": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "listingId": {
            ".validate": "!newData.exists() || newData.isString()"
          }
        },
        "lastMessageTime": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "unreadCount": {
          "$uid": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          }
        },
        "subject": {
          ".validate": "!newData.exists() || newData.isString()"
        },
        "listingId": {
          ".validate": "!newData.exists() || newData.isString()"
        },
        "listingTitle": {
          ".validate": "!newData.exists() || (newData.isString() && newData.val().length <= 200)"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && (!data.exists() || data.val() === newData.val()) && newData.val() <= now"
        },
        "$other": {
          ".validate": false
        }
      }
    },

    "userStatus": {
      ".indexOn": ["lastSeen"],
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid == $uid",
        ".validate": "newData.hasChildren(['status', 'lastSeen'])",
        "status": {
          ".validate": "newData.isString() && newData.val().length <= 100 && (newData.val() === 'online' || newData.val() === 'away' || newData.val() === 'offline' || newData.val() === 'busy')"
        },
        "lastSeen": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "$other": {
          ".validate": false
        }
      }
    },

    "typing": {
      "$chatId": {
        "$uid": {
          ".read": "auth != null && root.child('chats').child($chatId).child('participants').child(auth.uid).exists()",
          ".write": "auth != null && auth.uid == $uid && root.child('chats').child($chatId).child('participants').child(auth.uid).exists()",
          ".validate": "newData.isBoolean()"
        }
      }
    },

    "lastActive": {
      ".indexOn": [".value"],
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid == $uid",
        ".validate": "newData.isNumber() && newData.val() <= now"
      }
    },

    "wanted": {
      ".read": true,
      ".write": "auth != null",
      "posts": {
        ".indexOn": ["createdAt", "userId", "game"],
        ".read": true,
        ".write": "auth != null",
        "$postId": {
          ".read": true,
          ".write": "auth != null && (!data.exists() || data.child('userId').val() === auth.uid || data.child('userId').val() === 'system')",
          ".validate": "newData.hasChildren(['userId', 'title', 'game', 'location', 'createdAt'])",
          "userId": {
            ".validate": "newData.val() === auth.uid || newData.val() === 'system'"
          },
          "title": {
            ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 200"
          },
          "description": {
            ".validate": "newData.isString() && newData.val().length <= 500"
          },
          "game": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "cardName": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "condition": {
            ".validate": "newData.isString() && (newData.val() === 'any' || newData.val() === 'near_mint' || newData.val() === 'lightly_played' || newData.val() === 'moderately_played' || newData.val() === 'heavily_played' || newData.val() === 'damaged')"
          },
          "isPriceNegotiable": {
            ".validate": "newData.isBoolean()"
          },
          "priceRange": {
            "min": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "max": {
              ".validate": "newData.isNumber() && newData.val() >= newData.parent().child('min').val()"
            }
          },
          "location": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "detailedDescription": {
            ".validate": "!newData.exists() || newData.isString()"
          },
          "createdAt": {
            ".validate": "newData.isNumber() && (!data.exists() || data.val() === newData.val()) && newData.val() <= now"
          },
          "userName": {
            ".validate": "newData.isString()"
          },
          "userAvatar": {
            ".validate": "!newData.exists() || newData.isString()"
          }
        }
      }
    },
    
    "wantedPosts": {
      ".indexOn": ["createdAt", "userId", "game"],
      ".read": true,
      ".write": "auth != null",
      "$postId": {
        ".read": true,
        ".write": "auth != null && (!data.exists() || data.child('userId').val() === auth.uid || data.child('userId').val() === 'system')",
        ".validate": "newData.hasChildren(['userId', 'title', 'game', 'location', 'createdAt'])",
        "userId": {
          ".validate": "newData.val() === auth.uid || newData.val() === 'system'"
        },
        "title": {
          ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 200"
        },
        "description": {
          ".validate": "newData.isString() && newData.val().length <= 500"
        },
        "game": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "cardName": {
          ".validate": "!newData.exists() || newData.isString()"
        },
        "condition": {
          ".validate": "newData.isString() && (newData.val() === 'any' || newData.val() === 'near_mint' || newData.val() === 'lightly_played' || newData.val() === 'moderately_played' || newData.val() === 'heavily_played' || newData.val() === 'damaged')"
        },
        "isPriceNegotiable": {
          ".validate": "newData.isBoolean()"
        },
        "priceRange": {
          "min": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "max": {
            ".validate": "newData.isNumber() && newData.val() >= newData.parent().child('min').val()"
          }
        },
        "location": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "detailedDescription": {
          ".validate": "!newData.exists() || newData.isString()"
        },
        "createdAt": {
          ".validate": "newData.isNumber() && (!data.exists() || data.val() === newData.val()) && newData.val() <= now"
        },
        "userName": {
          ".validate": "newData.isString()"
        },
        "userAvatar": {
          ".validate": "!newData.exists() || newData.isString()"
        }
      }
    },

    "$other": {
      ".validate": false
    }
  }
}